--- pvemanagerlib.js.9.orig	2025-10-18 15:11:19.718523806 -0600
+++ pvemanagerlib.js.9	2025-10-18 15:23:35.198297175 -0600
@@ -9781,6 +9781,7 @@
     alias: ['widget.pveiScsiProviderSelector'],
     comboItems: [
         ['comstar', 'Comstar'],
+        ['truenas', 'TrueNAS-API'],
         ['istgt', 'istgt'],
         ['iet', 'IET'],
         ['LIO', 'LIO'],
@@ -64903,7 +64904,6 @@
                     fields: ['total', 'used'],
                     fieldTitles: ['Total Size', 'Used Size'],
                     store: rrdstore,
-                    unit: 'bytes',
                 },
             ],
             listeners: {
@@ -65162,10 +65162,31 @@
             },
         },
         changeISCSIProvider: function (f, newVal, oldVal) {
+            var me = this;
             var vm = this.getViewModel();
             vm.set('isLIO', newVal === 'LIO');
             vm.set('isComstar', newVal === 'comstar');
             vm.set('hasWriteCacheOption', newVal === 'comstar' || newVal === 'istgt');
+            vm.set('isTrueNAS', newVal === 'truenas');
+            vm.set('hasWriteCacheOption', newVal === 'comstar' || newVal === 'truenas' || newVal === 'istgt');
+            if (newVal !== 'truenas') {
+                me.lookupReference('truenas_use_ssl_field').setValue(false);
+                me.lookupReference('truenas_apiv4_host_field').setValue('');
+                me.lookupReference('truenas_user_field').setValue('');
+                me.lookupReference('truenas_user_field').allowBlank = true;
+                me.lookupReference('truenas_password_field').setValue('');
+                me.lookupReference('truenas_password_field').allowBlank = true;
+                me.lookupReference('truenas_confirmpw_field').setValue('');
+                me.lookupReference('truenas_confirmpw_field').allowBlank = true;
+                me.lookupReference('truenas_apikey').setValue('');
+                me.lookupReference('truenas_apikey_field').allowBlank = true;
+            } else {
+                me.lookupReference('truenas_use_ssl_field').setValue(true);
+                me.lookupReference('truenas_user_field').allowBlank = true;
+                me.lookupReference('truenas_password_field').allowBlank = true;
+                me.lookupReference('truenas_confirmpw_field').allowBlank = true;
+                me.lookupReference('truenas_apikey_field').allowBlank = true;
+            }
         },
     },
 
@@ -65183,6 +65204,7 @@
     },
 
     setValues: function (values) {
+        values.truenas_confirmpw = values.truenas_password;
         values.writecache = values.nowritecache ? 0 : 1;
         this.callParent([values]);
     },
@@ -65199,7 +65221,7 @@
                 allowBlank: false,
             },
             {
-                xtype: me.isCreate ? 'textfield' : 'displayfield',
+                xtype: 'textfield',
                 name: 'pool',
                 value: '',
                 fieldLabel: gettext('Pool'),
@@ -65209,11 +65231,11 @@
                 xtype: me.isCreate ? 'textfield' : 'displayfield',
                 name: 'blocksize',
                 value: '4k',
-                fieldLabel: gettext('Block Size'),
+                fieldLabel: gettext('ZFS Block Size'),
                 allowBlank: false,
             },
             {
-                xtype: me.isCreate ? 'textfield' : 'displayfield',
+                xtype: 'textfield',
                 name: 'target',
                 value: '',
                 fieldLabel: gettext('Target'),
@@ -65224,9 +65246,108 @@
                 name: 'comstar_tg',
                 value: '',
                 fieldLabel: gettext('Target group'),
-                bind: me.isCreate ? { disabled: '{!isComstar}' } : { hidden: '{!isComstar}' },
+                bind: {
+                    hidden: '{!isComstar}'
+                },
                 allowBlank: true,
-            },
+                },
+                {
+                xtype: 'proxmoxtextfield',
+                name: 'truenas_apiv4_host',
+                reference: 'truenas_apiv4_host_field',
+                value: '',
+                editable: true,
+                emptyText: Proxmox.Utils.noneText,
+                bind: {
+                    hidden: '{!isTrueNAS}'
+                },
+                fieldLabel: gettext('API IPv4 Host'),
+                },
+                {
+                xtype: 'proxmoxcheckbox',
+                name: 'truenas_use_ssl',
+                reference: 'truenas_use_ssl_field',
+                inputId: 'truenas_use_ssl_field',
+                checked: true,
+                bind: {
+                    hidden: '{!isTrueNAS}'
+                },
+                uncheckedValue: 0,
+                fieldLabel: gettext('API use SSL'),
+                },
+                {
+                xtype: 'proxmoxtextfield',
+                name: 'truenas_apikey',
+                reference: 'truenas_apikey_field',
+                inputType: me.isCreate ? '' : 'password',
+                value: '',
+                editable: true,
+                deleteEmpty: !me.isCreate,
+                emptyText: gettext('Requires SSL!'),
+                bind: {
+                    hidden: '{!isTrueNAS}'
+                },
+                fieldLabel: gettext('API key'),
+                validator: function(value) {
+                    var ssl = this.up().down('field[name=truenas_use_ssl]').getValue();
+                    if (!ssl && value) {
+                        return "TrueNAS requires SSL to use API key.";
+                    }
+                    return true;
+                },
+                },
+                {
+                xtype: 'textfield',
+                name: 'truenas_user',
+                reference: 'truenas_user_field',
+                inputId: 'truenas_user_field',
+                value: '',
+                fieldLabel: gettext('API Username'),
+                bind: {
+                    hidden: '{!isTrueNAS}'
+                },
+                },
+                {
+                xtype: 'proxmoxtextfield',
+                name: 'truenas_password',
+                reference: 'truenas_password_field',
+                inputType: me.isCreate ? '' : 'password',
+                value: '',
+                editable: true,
+                deleteEmpty: !me.isCreate,
+                emptyText: Proxmox.Utils.noneText,
+                bind: {
+                    hidden: '{!isTrueNAS}'
+                },
+                fieldLabel: gettext('API Password'),
+                change: function(f, value) {
+                    if (f.rendered) {
+                    f.up().down('field[name=truenas_confirmpw]').validate();
+                    }
+                },
+                },
+                {
+                xtype: 'proxmoxtextfield',
+                name: 'truenas_confirmpw',
+                reference: 'truenas_confirmpw_field',
+                inputType: me.isCreate ? '' : 'password',
+                value: '',
+                editable: true,
+                deleteEmpty: !me.isCreate,
+                submitValue: false,
+                emptyText: Proxmox.Utils.noneText,
+                bind: {
+                    hidden: '{!isTrueNAS}'
+                },
+                fieldLabel: gettext('Confirm Password'),
+                validator: function(value) {
+                    var pw = this.up().down('field[name=truenas_password]').getValue();
+                    if (pw !== value) {
+                    return "Passwords do not match!";
+                    }
+                    return true;
+                },
+            }, 
         ];
 
         me.column2 = [
@@ -65258,7 +65379,9 @@
                 xtype: me.isCreate ? 'textfield' : 'displayfield',
                 name: 'comstar_hg',
                 value: '',
-                bind: me.isCreate ? { disabled: '{!isComstar}' } : { hidden: '{!isComstar}' },
+                bind: {
+                    hidden: '{!isComstar}'
+                },
                 fieldLabel: gettext('Host group'),
                 allowBlank: true,
             },
@@ -65266,9 +65389,11 @@
                 xtype: me.isCreate ? 'textfield' : 'displayfield',
                 name: 'lio_tpg',
                 value: '',
-                bind: me.isCreate ? { disabled: '{!isLIO}' } : { hidden: '{!isLIO}' },
-                allowBlank: false,
+                bind: {
+                    hidden: '{!isLIO}'
+                },
                 fieldLabel: gettext('Target portal group'),
+                allowBlank: true
             },
         ];
 
